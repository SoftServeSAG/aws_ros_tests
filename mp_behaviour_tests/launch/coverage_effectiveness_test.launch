<launch>
    <!-- Offset from map frame point 0 0 0 0 0 0 -->
    <arg name="coverage_area_offset" default="-2.5 -2.5 0 0 0 0"/>
    <!-- coverage area height, X dimension of map -->
    <arg name="coverage_area_size_x" default="10"/>
    <!-- coverage area width, Y dimension of map -->
    <arg name="coverage_area_size_y" default="10"/>
    <!-- Robot tool radius(or width/2) -->
    <arg name="tool_radius" default="0.2"/>
    <!-- Coverage goal, in percents -->
    <arg name="coverage_goal" default="$(optenv ROBOT_COVERAGE_EFFECTIVENESS_TEST_COVERAGE_GOAL 80)"/>
    <!-- topic name, where coverage progress is published -->
    <arg name="coverage_topic" default="/coverage_progress"/>
    <!-- max deviation between amount of visits of each cell in the grid -->
    <arg name="max_deviation" default="$(optenv ROBOT_COVERAGE_EFFECTIVENESS_TEST_MAX_DEVIATION 1)"/>
    <!-- Maximal value of grid cell visits -->
    <arg name="point_max_visits" default="$(optenv ROBOT_COVERAGE_EFFECTIVENESS_TEST_POINT_MAX_VISITS 2)"/>

    <!-- maximal difference of the number of visits between neighbor cells in the grid -->
    <arg name="max_difference" default="$(optenv ROBOT_COVERAGE_EFFECTIVENESS_TEST_POINT_MAX_DIFFERENCE 3)" />

    <!-- test environment -->
    <arg name="environment" default="$(optenv ENVIRONMENT AWS)"/>
    <!-- Test timeout -->
    <arg name="sim_timeout_seconds" default="$(optenv ROBOT_COVERAGE_EFFECTIVENESS_TEST_SIM_TIMEOUT_SECONDS 300)"/>

    <!-- with each visit, amount of visits will be changed on this value -->
    <arg name="coverage_effectivity" value="1" />

    <!-- Launch coverage progress tracking -->
    <node pkg="tf" type="static_transform_publisher" name="map_to_coveragemap" args="$(arg coverage_area_offset) map coverage_map 100" />
    <node pkg="mp_behaviour_tests" type="coverage_effectiveness_progress_node.py" name="coverage_progress">
        <param name="coverage_area_size_x" value="$(arg coverage_area_size_x)" />
        <param name="coverage_area_size_y" value="$(arg coverage_area_size_y)" />
        <param name="map_frame" value="/coverage_map"/>

        <!-- The grid size, for this test should be equal to robot tool width -->
        <param name="coverage_resolution" value="$(eval 2 * arg('tool_radius'))" />
        <param name="coverage_effectivity" value="$(arg coverage_effectivity)" />
    </node>

    <!-- launch test node -->
    <node pkg="mp_behaviour_tests" type="coverage_effectiveness_node.py" name="coverage_efectiveness_test" required="true">
        <param name="sim_timeout_seconds" type="int" value="$(arg sim_timeout_seconds)" />
        <param name="environment" type="string" value ="$(arg environment)"/>
        <param name="coverage_goal" value="$(arg coverage_goal)"/>
        <param name="max_deviation" value="$(arg max_deviation)"/>
        <param name="coverage_effectivity" value="$(arg coverage_effectivity)"/>
        <param name="max_difference" value="$(arg max_difference)"/>
    </node>
</launch>